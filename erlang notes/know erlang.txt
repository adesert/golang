Erlang 内部包含的一个数据库：Mnesia
COP: 面向并发编程
OTP: 拓展库
%： 行注释
. : 一个语句的结束
所有变量都必须以大写字母开头
erlang 中所有的变量都是静态常量（一次赋值，不可二次改变）
erlang 中的变量是单一赋值变量。
=： erlang 中的“=”不再是赋值操作符而是模式匹配运算符
变量作用域：不存在全局，私有，说法；变量在哪儿使用，那么变量就属于哪儿
一个绑定变量就是一个指针
5 div 3 =>1 整数除
5 rem 3 =>2 取余数
4 div 2 =>2
原子：用来表示不同的非数字常量值
		原子是全局有效的，而且无需使用宏定义或者包含文件
		原子以小写字母开头，后跟数字字母或者下划线（_) 或邮件符号@
		使用单引号括起来的字符也是原子
		一个原子的值就是原子自身
		erlang 是一个函数式语言，每一个表达式都必须有值

元组（tuple）：{jon,1.08}

内存收集：erlang使用垃圾搜集器去收回没有使用的内存
引用未定义的变量会报错
当想从元组中提取一些字段值时，就会用到模式匹配操作符=
“_” : 匿名变量

-----
列表：
S = [1,3,3,4]
列表第一个元素成为表头（head），其他为表尾
访问列表头是一个非常高效的操作
[H|T] : 表头是H,表尾：T，T 也是一个列表

-----
字符串：使用双引号
shell 打印一串列表值时，只有列表中的所有整数都是可打印字符，它才把这个列表当做字符串来打印；

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>......
模块：
模块是erlang基本单元，我们编写的所有函数都存在与模块中，模块文件通常存放在以.erl为拓展名的文件中。
要运行一个模块，首先需要编译它，编译成功之后的模块文件其拓展名是：.beam

>>>>>>>>>>>>>>>>>>>>>>..
fun() 匿名函数
能够返回fun或者接受fun作为参数的函数，都被成为高阶函数

>>>>>>>>>>>>>>>>>>>>>>>>>>>
我写程序倾向于循序渐进地扩展代码

>>>>>>>>>>>>>>..............
毕达哥拉斯三元组：
毕达哥拉斯三元组是一个整数集合{A,B,C},它使得A^2 + B^2 = C^2

>>>>>>>
X--Y  是列表分离操作符，他从列表X中分离出元素Y

断言（guard) : 是一种强化模式匹配的功能的结构。使用断言，可以再一个模式做一些简单的变量
测试和比较
max(X,Y) when X > Y -> X;
max(X,Y) -> Y.

断言序列：
断言序列可以是单个断言也可以是一系列用分号（;) 分开的断言集合。在断言集合G1;G2;G3.....;Gn中
只要任何一个断言为true,那么整个断言序列就为true

断言也可以是用一系列逗号分开的断言集合。断言集合G1,G2,G3,.....,GN中，只有所有断言都为TRUE，整个断言
才为true

>>>>>>>>>>>>>>>>......
记录：
定义：
-record(Name,{key1 = Defalult1,key2 = Defalult2})
记录的名字和字段名都必须是原子

记录的定义可以包含在Erlang源代码或以.hrl为拓展名的文件中，这些文件可以被Erlang源代码引用）
%定义记录
-record(todo,{status = reminder,who = joe,text})
X = #todo{status = u,who = "jack",text = "hello world"}.
%创建类型为todo的新纪录
X2 = X#todo{status = done}.
复制一个存在的记录。语法X#todo{status = done}表示创建一个X的副本，这只是原纪录的一个副本，原纪录本身并未改变
>X#todo.text.
"hello world"

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 异常------------
try exp of
	block
catch
	block
after
	block %一定会被执行
end


》》》》》》》》》》》》》》》》》》》》》》》》》》》。。。。。
BIF: 内建函数： 就是erlang内建的函数。他们通常用来完成那些无法用Erlang完成的任务。比如，将列表转换为元组
或者获取当前的时间和日期。完成这些操作的函数，我们称之为BIF
例如：tuple_to_list/1 能将元组转换为列表，time/0返回当前时间的时分秒
1> tuple_to_list({12,cat,"hello"}).
[12,cat,"hello"]
2> time().
{20,0,3}


二进制数据：用来存储大量的原始数据
相对于元组或列表，二进制类型更加节省内存，而且运行时系统也对次进行了优化，对二进制数据的输入输出会更加高效
1> <<5,10,20>>.


比特语法：
比特语法是模式匹配的一种拓展。经常用于对二进制数据中的单个比特位或者比特位串进行封包和解包。

》》》》》》》》》》》》。。
-module(modname) : 模块生命，modname必须是一个原子。这个属性必须是文件中第一个属性。
-import(Mode,[Name1/Arity1,Name2/Arity2,...]).
这个属性指定编译器从Mode模块中导入参数为Arity1且名为Name1的函数
一旦你从模块中导入某个函数，那么调用这个函数时就不需要特别指明模块名。例如：
-module(abc).
-import(lists,[map/2]).
f(L) -> 
	L1 = map(fun(X) -> 2*X end,L),
	lists:sum(L1)
map的调用不需要指定模块名，而对sum的调用则一定要在函数调用中包含模块名。
-export([Name1/Arity1,Name2/Arity2,...]).
这个属性指定从当前模块中导出Name1/Arity1、 Name2/Arity2等函数。
注意: 只有被导出的函数才能在模块外部被调用：

-vsn(Version) % 指定一个模块的版本。

用户自定义属性
用户定义模块属性遵循如下的语法规则：
-SomeTag(Value).

-module(attrs).
-vsn(1234).
-author({joe,armstrong}).
-purpose("example of attributes").
-export([fac/1]).


>>>>>>>>>>>>
not B1: 逻辑非
B1 and B2: 逻辑与
B1 or B2: 逻辑或
B1 xor B2: 逻辑异或

>>>>>>>>>>
2#00101010 % 二进制
16#af6bfa23 %16进制

$C %表示ASCII 字符C的整数值

》》》》》》》》》》》》》》
进程字典：
Erlang 每一个进程都有自己的私有数据存储，叫做进程字典。（存储结构是键值对）
@spec put(Key ,Value) --> oldvalue,它是Key的前一个关联值。如果没有之前关联过的值，
则会返回原子undefined.

@spec get(Key) ->Value. 存在返回value，不存在返回原子：undefined
@spec get() -> [{Key,Value}]. 以{Key,Value} 元组列表的形式返回整个字典
@spec get_keys(Value) -> [Key]. % 返回字典中值为Value的键的列表。
@spec erase(Key) ->Value. % 如果字典中存在键Key对应的值，那么返回对应的值，否则返回原子undefine.最后删除与键key相关的值

@spec erase()->[{Key,Value}]. 删除整个进程字典。返回值时有{Key,Value}元组组成的列表，其内容为进程字典被删除前的全部信息

说明：我几乎不会使用进程字典，使用进程字典会导致一些难以察觉的错误。


》》》》》》》》》》》》》》》》》》》》
短路布尔表达式：
Expr1 orelse Expr2
首先求值的是表达式Expr1,如果Expr1 运算结果为true,那么Expr2就不会被求值（即被短路了）
如果Expr1 为false,才会对Expr2 进行求值。

Expr1 andalso Expr2
首先求值的是Expr1,如果Expr1 运算结果为true，那么Exxpr2必须被求值。如果Expr1 运算结果为false，则Expr2无需被求值。

》》》》》》》》》》》》》》》
比较运算符
X =< Y  X小雨等于Y
X >= Y X大于等于Y
X == Y X等于Y
X /= Y X 不等于Y
X =:= Y X全等于Y
X =/= Y X 不全等于Y

>>>>>>>>>>>>>>>>>>>>>>>>>>.
下划线变量：
_VarName 是一种特殊的语法，用于声明一个常规变量而不是匿名变量。如果一个变量在一个字句中只被使用一次，那么编译器
通常都会提出警告，因为这很有可能是存在错误的征兆。如果变量仅被使用一次，但以下划线开始，那么编译器就不会产生警告消息

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Erlang中一个非常重要的名词：Process，也就是我们前面提到的“个体”。它不是我们操作系统中的进程，也不是线程。它是Erlang提供给我们的超级轻量的进程。为了适应大规模并发的特性，Process需要能够快速创建，快速销毁。Process之间通信的唯一方法就是消息，我们只要知道一个Process的名字即pid，就可以向其发送消息。Process也可以在任何时候，接收消息。我们这样做只有一个目的：让我们的系统更加简单，用一种朴素的做法，实现一个高效的语言。

Erlang是种函数式编程语言，对此我没有很深刻的理解，最明显的特征就是，Erlang中到处都是函数，函数构成了我们的产品的主体，把这些函数放到一个个的Process中去，让他们运行起来，那么就组成了我们朝气蓬勃的产品。
Erlang支持对数据的位操作，拥有丰富的数据持久化机制。
同时需要说明的是Erlang内建垃圾回收机制（GC）。

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>...............
Erlang中只有8种基本的数据类型：
integer、float、atom、reference、fun、port、pid、bitstring
同时提供2种复合结构：tuple，list，这就是Erlang的所有数据类型。

3.变量单次赋值

这个是一个匪夷所思的特性，变量竟然只能单次赋值！是的Erlang中变量一旦绑定某个数值以后，就不能再次绑定，这样做的好处是便于调试出错（更深层次的原因是Erlang为并发设计，如果变量可以修改，那么就涉及到资源的加锁解锁等问题），当发生错误时，某个变量是什么就永远是什么，不用顺藤摸瓜的查找谁修改过它，省了好多事情。唯一的麻烦就是需要一个信的变量时，你必须再为它想一个名字。

4.丰富的libs

Erlang中提供丰富的libs
stdlib中包含大量的数据结构如lists，array，dict，gb_sets，gb_trees，ets，dets等
mnesia提供一个分布式的数据库系统
inets提供ftp client，http client/server，tftp client/server
crypto 提供加密解密相关函数，基于openssl相关实现
ssl 实现加密socket通信，基于openssl实现
ssh 实现ssh协议
xmerl 实现XML相关解析
snmp 实现SNMP协议（Simple Network Management Protocol）
observer 用来分析与追踪分布式应用
odbc 使Erlang可以连接基于SQL的数据库
orber 实现CORBA对象请求代理服务
os_mon 提供对操作系统的监控功能
dialyzer提供一个静态的代码或程序分析工具
edoc 依据源文件生成文档
gs 可以为我们提供某些GUI的功能（基于Tcl/Tk）
…
还有很多朋友提供了一些开源的lib，比如eunit，用来进行单元测试。


5.灵活多样的错误处理

Erlang最初为电信产品的开发，这样的目的，决定了其对错误处理的严格要求。Erlang中提供一般语言所提供的exception，catch，try…catch等语法，同时Erlang支持Link和Monitor两种机制，我们可以将Process连接起来，让他们组成一个整体，某个Process出错，或推出时，其他Process都具有得知其推出的能力。而Monitor顾名思义，可以用来监控某个Process，判断其是否退出或出错。所有的这些Erlang都提供内在支持，我们快速的开发坚固的产品，不在是奢望。


6.代码热替换

你的产品想不间断的更新么？Erlang可以满足你这个需求，Erlang会在运行时自动将旧的模块进行替换。一切都静悄悄。


7.天生的分布式

Erlang天生适合分布式应用开发，其很多的BIF（内建函数，相API）都具有分布式版本，我们可以通过BIF在远程机器上创建Process，可以向远程机器上的某个Process发送消息。在分布式应用的开发中，我们可以像C、C＋＋，JAVA等语言一样，通过Socket进行通讯，也可以使用Erlang内嵌的基于Cookie的分布式架构，进行开发。当然也可以两者混合。分布式开发更加方便，快速。Erlang的Process的操作，Error的处理等都对支持分布式操作。
8.超强的并发性

由于采用其自身Process，而没有采用操作系统的进程和线程，我们可以创建大规模的并发处理，同时还简化了我们的编程复杂度。我们可以通过几十行代码实现一个并发的TCP服务器，这在其他语言中都想都不敢想！


9.多核支持

Erlang让您的应用支持多个处理器，您不需要为不同的硬件系统做不同的开发。采用Erlang将最大限度的发挥你的机器性能。
10.跨平台

如同JAVA一样，Erlang支持跨平台（其目前支持linux，mac，windows等19种平台），不用为代码的移植而头疼。
我们仅仅需要了解平台的一些特性，对运行时进行优化。
11.开源

开源是我非常喜欢的一个词汇，开源意味这更加强壮，更加公开，更加的追求平等。开源会让Erlang更好。


五、Erlang与外界的交互

Erlang可以与其他的语言进行交互，如C、C＋＋，Java。当然也有热心的朋友提供了与其他语言的交互，如果需要你也可以根据Erlang的数据格式，提供一个库，让Erang与您心爱的语言交互。
Erlang支持分布式开发，您可以创建一个C Node，其如同一个Erlang节点，前提是你遵照Erlang的规范。
当然最常用的交互还是再同一个Node上，比如我们要调用某个lib，调用一些系统提供的功能，这时候主要有两种方式：Port和嵌入式执行。
Port是Erlang最基本的与外界交互的方式，进行交互的双方通过编码，解码，将信息以字节流的方式进行传递。（具体这个通道的实现方式，根据操作系统的不同而不同，比如unix环境下，采用PIPE实现，理论上任何支持对应Port通道实现的语言都可以与Erlang进行交互）。Erlang为了方便C和JAVA程序员，提供了Erl_Interface和Jinterface。
采用Port，您的代码在Erlang的平台之外运行，其崩溃不会影响Erlang。
嵌入式执行，通过Erlang平台加载，因此这是非常危险的，如果您的程序崩溃，没有任何理由，Erlang也会崩溃。


六、Erlang应用场景

分布式产品，网络服务器，客户端，等各种应用环境。
Erlang也可以作为一种快速开发语言，进行原型开发。


遇到问题时，不要退却，坚持下去找到解决办法
4.         对语言熟悉时，浏览一些好的开源项目
5.         有信心时，开始动手做一个小项目
6.         不间断的与大家交流，共同提高

坚持看下去，代码继续写下去，我相信1个月，你会喜欢上Erlang的语法

别怕麻烦

八、Erlang开源项目

排名不分先后
couchdb     基于文档等非结构化数据的数据库，提供HTTP接口
disco       Map-Reduce框架，Erlang + Python
ejabberd    性能出众，使用广泛的Jabber开源服务器
mochiweb    轻便，高效的HTTP应用框架
rabbitmq    中间服务器，实现AMQP协议
yaws        高效的web server
etorrent    Bittorrent客户端
scalaris      分布式的key-value存储


九、遇到问题

参看Erlang官方文档 http://www.erlang.org/doc/
订阅Erlang的maillist（http://www.erlang.org/mailman/listinfo/erlang-questions），进行提问
在Nabble提供的Erlang maillist存档中搜索（http://www.nabble.com/Erlang-f14095.html）
Google中搜索答案

